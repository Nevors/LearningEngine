// <auto-generated />
using System;
using LearningEngine.Persistence.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LearningEngine.Persistence.Migrations
{
    [DbContext(typeof(LearnEngineContext))]
    [Migration("20200514095105_TryingToImplimentStatistic")]
    partial class TryingToImplimentStatistic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LearningEngine.Persistence.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "deffered execution exist",
                            ThemeId = 3,
                            Title = "deffered execution"
                        },
                        new
                        {
                            Id = 2,
                            Content = "GC - is garbage collector",
                            ThemeId = 3,
                            Title = "GC "
                        });
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<double>("CardKnowledge")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Statistic");
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentThemeId");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "all about .NET",
                            IsPublic = true,
                            Name = "dotNet"
                        },
                        new
                        {
                            Id = 3,
                            Description = "all about linq",
                            IsPublic = true,
                            Name = "linq",
                            ParentThemeId = 2
                        });
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(64)")
                        .HasMaxLength(64);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "rolit@mail.cor",
                            Password = new byte[] { 34, 22, 251, 167, 215, 101, 240, 213, 55, 98, 27, 159, 248, 119, 191, 223, 139, 53, 131, 5, 241, 224, 207, 83, 179, 206, 76, 178, 191, 94, 134, 102, 156, 172, 222, 210, 74, 107, 22, 106, 14, 27, 177, 136, 78, 197, 208, 136, 215, 90, 245, 106, 145, 219, 50, 9, 106, 255, 251, 66, 111, 244, 162, 161 },
                            UserName = "rolit"
                        });
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Card", b =>
                {
                    b.HasOne("LearningEngine.Persistence.Models.Theme", "Theme")
                        .WithMany("Cards")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Note", b =>
                {
                    b.HasOne("LearningEngine.Persistence.Models.Theme", "Theme")
                        .WithMany("Notes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Permission", b =>
                {
                    b.HasOne("LearningEngine.Persistence.Models.Theme", "Theme")
                        .WithMany("Permissions")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningEngine.Persistence.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Statistic", b =>
                {
                    b.HasOne("LearningEngine.Persistence.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningEngine.Persistence.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningEngine.Persistence.Models.Theme", b =>
                {
                    b.HasOne("LearningEngine.Persistence.Models.Theme", "ParentTheme")
                        .WithMany("SubThemes")
                        .HasForeignKey("ParentThemeId")
                        .OnDelete(DeleteBehavior.NoAction);
                });
#pragma warning restore 612, 618
        }
    }
}
